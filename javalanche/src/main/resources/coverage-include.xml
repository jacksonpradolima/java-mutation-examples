<project name="mutation-include" default="">

	<import file="./javalanche-tasks.xml" />
	

	<target name="runMutationsCoverage" description="* run a given mutation tasks with line coverage tracing enabled">
		<condition property="run.mutations.coverage.single.task.mode" value="-Djavalanche.single.task.mode=true" else="-Djavalanche.single.task.mode=false">
					<isset property="single.task.mode"/>
		</condition>
		
		<property name="run.mutations.coverage.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="run.mutations.coverage.run.mode" value="-Djavalanche.run.mode=mutation-coverage"/>
		<property name="run.mutations.coverage.javalanche.package.prefix" value="-Djavalanche.project.prefix=${project.prefix}"/>
		<property name="run.mutations.coverage.javalanche.project.tests" value="-Djavalanche.tests=${project.tests}"/>
		<property name="run.mutations.coverage.mutation.file" value="-Djavalanche.mutation.file=${mutation.file}"/>
		<property name="run.mutations.coverage.mutation.result.file" value="-Dmutation.result.file=${mutation.result.file}"/>
		<property name="run.mutations.coverage.verbose" value="-verbose"/>
		<property name="run.mutations.coverage.field.file.arg" value="-Djavalanche.invariant.field.file=${field.file}"/>
		<property name="run.mutations.coverage.verbose.summary" value="-Dverbose.invariant.summary=false"/>
		<property name="run.mutations.coverage.trace.returns" value="-Djavalanche.trace.returns=false"/>

		<path id="run.mutations.coverage.classpath.add">
			<path refid="mutation.classpath"/>
		</path>

		<!--${run.mutations.coverage.verbose}-->
		<antcall target="${javalanche.task}">
			<param name="javalanche.arg.line" value=" -verify ${run.mutations.coverage.mutation.javaagent} ${run.mutations.coverage.run.mode} ${run.mutations.coverage.javalanche.package.prefix} ${run.mutations.coverage.javalanche.project.tests} ${run.mutations.coverage.mutation.file} ${run.mutations.coverage.mutation.result.file} ${run.mutations.coverage.field.file.arg}  ${run.mutations.coverage.verbose.summary} ${run.mutations.coverage.trace.returns} ${run.mutations.coverage.single.task.mode} ${javalanche.add.commands}" />
			<reference refid="run.mutations.coverage.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	
	<target name="cleanCoverage" description="* Delete all data produced by the coverage tasks" >
		<delete dir="${javalanche.out.dir}/tracer/"/>
	</target>
	
	<target name="cleanTrace" description="* Delete the trace line coverage and return value data" >
		<delete dir="${javalanche.out.dir}/tracer/line/"/>
		<delete dir="${javalanche.out.dir}/tracer/data/"/>
	</target>
	
	
	<target name="createCoverageDataMult" description="* Create line and return coverage data for multiple permuted runs.">
		<property name="coverage.mult.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="coverage.mult.memory" value="-Xmx${javalanche.maxmemory}"/>
		<property name="coverage.mult.javalanche.run.mode" value="-Djavalanche.run.mode=create-coverage-mult"/>
		<property name="coverage.mult.javalanche.package.prefix" value="-Djavalanche.project.prefix=${project.prefix}"/>
		<property name="coverage.mult.javalanche.project.tests" value="-Djavalanche.tests=${project.tests}"/>

		<path id="coverage.mult.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="${javalanche.task}">
			<param name="javalanche.arg.line" value=" ${coverage.mult.mutation.javaagent} ${coverage.mult.memory} ${coverage.mult.javalanche.run.mode} ${coverage.mult.javalanche.package.prefix} ${coverage.mult.javalanche.project.tests}" />
			<reference refid="coverage.mult.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	
	
	<target name="checkCoverageData" description="* Compare the traces generated by createCoverageDataMult. If there is no non-determinsism in the program no differences should occur.">
		<java classname="de.unisb.cs.st.javalanche.coverage.CompareTraces" maxmemory="${javalanche.maxmemory}" fork="true">
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	

	<target name="compareTraces" description="* compare two traces (property -Dcmpmode= -Dcmpid1= -Dcmpid2=) ">
		<echo> Compare ${cmpmode} traces: ${cmpid1} vs. ${cmpid2}</echo>
		<java classname="de.unisb.cs.st.javalanche.tracer.CompareTraces" maxmemory="${javalanche.maxmemory}" fork="true">
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
			<arg value="${cmpmode} ${cmpid1} ${cmpid2}"/>
		</java>
	</target>
		
<!--
	<target name="analyzeManual" description="">
		<java classname="de.unisb.cs.st.javalanche.coverage.experiment.ManualResultsAnalyzer" maxmemory="${javalanche.maxmemory}" fork="true">
		<jvmarg line="-Djavalanche.project.prefix=${project.prefix}"/>	
		<classpath>
				<path refid="mutation.classpath" />
		</classpath>

		</java>
	</target>
	

	<target name="makeDistances" description="">
		<java classname="de.unisb.cs.st.javalanche.coverage.distance.MethodDistances" maxmemory="${javalanche.maxmemory}" fork="true">
		<jvmarg line="-Djavalanche.project.prefix=${project.prefix}"/>	
		<classpath>
				<path refid="mutation.classpath" />
		</classpath>

		</java>
	</target>
-->

</project>
